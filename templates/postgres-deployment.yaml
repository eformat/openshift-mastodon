---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
  name: {{ include "postgresql.fullname" . }}
  annotations:
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"postgresql:{{ .Values.postgresql.image.tag | default "9.6-el8" }}","namespace":"openshift"},"fieldPath":"spec.template.spec.containers[?(@.name==\"postgresql\")].image"}]'
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "postgresql.selectorLabels" . | nindent 6 }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "postgresql.labels" . | nindent 8 }}
    spec:
      containers:
        - name: postgresql
          env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: {{ default "postgresqlUsername" }}
                  name: {{ include "postgresql.name" . }}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: {{ default "postgresqlPassword" }}
                  name: {{ include "postgresql.name" . }}
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: {{ default "postgresqlDatabase" }}
                  name: {{ include "postgresql.name" . }}
          image: ' '
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: {{ .Values.postgresql.service.port | default "5432" }}
            timeoutSeconds: 1
          ports:
            - containerPort: {{ .Values.postgresql.service.port  | default "5432" }}
              protocol: TCP
              name: postgresql
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -i
                - -c
                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: {{ include "postgresql.name" . }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: {{ include "postgresql.name" . }}
          persistentVolumeClaim:
            claimName: {{ include "postgresql.name" . }}
